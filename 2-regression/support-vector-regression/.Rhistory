backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
print(length(pValues))
print(pValues)
print(numOfVars)
maxPValue <- max(pValues)
# if (maxPValue > significance_level){
#   varToEliminate <- which(pValues == maxPValue)
#   dataset <- dataset[, -varToEliminate]
#   numOfVars <- numOfVars - 1
# }
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
print(length(pValues))
print(pValues)
print(numOfVars)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue) + 1
dataset <- dataset[, -varToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue) + 1
dataset <- dataset[, -varToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varIdToEliminate <- which(pValues == maxPValue) + 1
dataset <- dataset[, -varIdToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varIdToEliminate <- which(pValues == maxPValue) + 1
print(varIdToEliminate)
dataset <- dataset[, -varIdToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varIdToEliminate <- which(pValues == maxPValue)
print(varIdToEliminate)
dataset <- dataset[, -varIdToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
#print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varIdToEliminate <- which(pValues == maxPValue)
print(varIdToEliminate)
dataset <- dataset[, -varIdToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
#print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varIdToEliminate <- which(pValues == maxPValue)
#print(varIdToEliminate)
dataset <- dataset[, -varIdToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
#print(numOfVars)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 0)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varIdToEliminate <- which(pValues == maxPValue)
print(varIdToEliminate)
dataset <- dataset[, -varIdToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 0)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varIdToEliminate <- which(pValues == maxPValue)
print(-varIdToEliminate)
dataset <- dataset[, -varIdToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 0)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(-varToEliminate)
dataset <- dataset[, -varToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(-varToEliminate)
dataset <- dataset[, -varToEliminate]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(-varToEliminate)
dataset <- dataset[, -(varToEliminate + 1)]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(varToEliminate)
dataset <- dataset[, -(varToEliminate + 1)]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(varToEliminate)
print(dataset)
dataset <- dataset[, -(varToEliminate + 1)]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(varToEliminate)
print(dataset[varToEliminate])
dataset <- dataset[, -(varToEliminate + 1)]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(varToEliminate)
print(dataset[varToEliminate])
dataset <- dataset[, -(varToEliminate - 1)]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(varToEliminate)
print(dataset[varToEliminate])
dataset <- dataset[, -(varToEliminate - 1)]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues not include last var
pValues <- coef(summary(model))[c(2 : (numOfVars + 1)), "Pr(>|t|)"]
#print(length(pValues))
print(pValues)
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
print(varToEliminate)
print(dataset[varToEliminate - 1])
dataset <- dataset[, -(varToEliminate - 1)]
numOfVars <- numOfVars - 1
}
}
# return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
# Automatic Backward Elimination
backwardElimination <- function(dataset, significance_level) {
numOfVars <- length(dataset)
for (i in c(1 : numOfVars)){
# TODO: parameterize dependent var (Profit)
model <- lm(formula = Profit ~ ., data = dataset)
# FIX: pValues missing last var
pValues <- coef(summary(model))[c(2 : numOfVars), "Pr(>|t|)"]
maxPValue <- max(pValues)
if (maxPValue > significance_level){
varToEliminate <- which(pValues == maxPValue)
dataset <- dataset[, -(varToEliminate)]
numOfVars <- numOfVars - 1
}
}
return(summary(model))
}
# Usage:
SL = 0.05
dataset <- read.csv('50_Startups.csv')
# dataset <- dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
setwd("C:/Users/enginoobz/Desktop/practice-projects/machine-learning-udemy/2-regression/multivariate-linear-regression")
dataset <- read.csv('position-salaries.csv')
setwd("C:/Users/enginoobz/Desktop/practice-projects/machine-learning-udemy/2-regression/support-vector-regression")
dataset <- read.csv('position-salaries.csv')
# omit 1st column which is redundant w/ 2nd
dataset <- dataset [2: 3]
View(dataset)
### TRAIN MODELS
install.packages('e1071')
### TRAIN MODELS
# install.packages('e1071')
library(e1071)
model <- svm(formula = Salary ~ ., data = dataset, type = 'eps-regression')
summary(model)
### PREDICT
predict(model, data.frame(Level <- 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(model, dataset)),
colour = 'blue') +
labs(title = 'Position level vs. Salary', x = 'Position level', y = 'Salary')
