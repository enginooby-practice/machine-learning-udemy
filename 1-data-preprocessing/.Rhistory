setwd("C:/Users/enginoobz/Desktop/practice-projects/machine-learning-udemy/1-data-preprocessing")
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary[is.na(dataset$Salary)] <- mean(dataset$Salary, na.rm=TRUE)
dataset = read.csv('Data.csv')
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = T)
dataset$Salary[is.na(dataset$Salary)] <- mean(dataset$Salary, na.rm = T)
dataset = read.csv('Data.csv')
dataset$Salary[is.na(dataset$Salary)] <- mean(dataset$Salary, na.rm = T)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = T)
dataset = read.csv('Data.csv')
Age
dataset = read.csv('Data.csv')
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = T)
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = T)
View(dataset)
View(dataset)
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = T)
View(dataset)
View(dataset)
Data.csv
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = F)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = F)
View(dataset)
View(dataset)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = T)
View(dataset)
View(dataset)
dataset$Salary[is.na(dataset$Salary)] <- mean(dataset$Salary, na.rm = T)
View(dataset)
View(dataset)
# Encode categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
View(dataset)
View(dataset)
# Split dataset into traning & test set
install.packages('caTools')
library(caTools)
detach("package:caTools", unload = TRUE)
# Split dataset into traning & test set
#install.packages('caTools')
library(caTools)
split = sample.split()
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == T)
View(training_set)
View(training_set)
test_set = subset(dataset, split == F)
View(test_set)
View(test_set)
# Scale numeric features
traing_set[, 2:3] = scale(training_set[, 2:3])
# Scale numeric features
training_set[, 2:3] = scale(training_set[, 2:3])
View(training_set)
View(training_set)
test_set[, 2:3] = scale(test_set[, 2:3])
View(dataset)
View(dataset)
dataset <- read.csv('Data.csv')
View(dataset)
View(dataset)
# Handle missing data
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = T)
dataset$Salary[is.na(dataset$Salary)] <- mean(dataset$Salary, na.rm = T)
View(dataset)
View(dataset)
# Split dataset into training & test set
#install.packages('caTools')
library(caTools)
set.seed(1)
split <- sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
# Scale numeric features
training_set[, 2:3] <- scale(training_set[, 2:3])
test_set[, 2:3] <- scale(test_set[, 2:3])
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(test_set)
dataset$Purchased <- factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Encode categorical data (into dummy vars)
dataset$Country <- factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
View(dataset)
View(dataset)
split <- sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
# Scale numeric features
training_set[, 2:3] <- scale(training_set[, 2:3])
test_set[, 2:3] <- scale(test_set[, 2:3])
View(dataset)
View(dataset)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
